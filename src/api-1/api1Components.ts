/* eslint-disable @typescript-eslint/no-empty-object-type */
/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApi1Context, type Api1Context, queryKeyFn } from "./api1Context";
import { deepMerge } from "./api1Utils";
import type * as Fetcher from "./api1Fetcher";
import { api1Fetch } from "./api1Fetcher";
import type * as Schemas from "./api1Schemas";

type QueryFnOptions = {
  signal?: AbortController["signal"];
};

export type GetAllUsersError = Fetcher.ErrorWrapper<undefined>;

export type GetAllUsersResponse = Schemas.UserListRepresentationDTO[];

export type GetAllUsersVariables = Api1Context["fetcherOptions"];

export const fetchGetAllUsers = (
  variables: GetAllUsersVariables,
  signal?: AbortSignal,
) =>
  api1Fetch<GetAllUsersResponse, GetAllUsersError, undefined, {}, {}, {}>({
    url: "/api/users",
    method: "get",
    ...variables,
    signal,
  });

export function getAllUsersQuery(variables: GetAllUsersVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<GetAllUsersResponse>;
};

export function getAllUsersQuery(
  variables: GetAllUsersVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<GetAllUsersResponse>)
    | reactQuery.SkipToken;
};

export function getAllUsersQuery(
  variables: GetAllUsersVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/api/users",
      operationId: "getAllUsers",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) => fetchGetAllUsers(variables, signal),
  };
}

export const useSuspenseGetAllUsers = <TData = GetAllUsersResponse,>(
  variables: GetAllUsersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetAllUsersResponse, GetAllUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useSuspenseQuery<
    GetAllUsersResponse,
    GetAllUsersError,
    TData
  >({
    ...getAllUsersQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetAllUsers = <TData = GetAllUsersResponse,>(
  variables: GetAllUsersVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<GetAllUsersResponse, GetAllUsersError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useQuery<GetAllUsersResponse, GetAllUsersError, TData>({
    ...getAllUsersQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetUserByIdPathParams = {
  id: string;
};

export type GetUserByIdError = Fetcher.ErrorWrapper<undefined>;

export type GetUserByIdVariables = {
  pathParams: GetUserByIdPathParams;
} & Api1Context["fetcherOptions"];

export const fetchGetUserById = (
  variables: GetUserByIdVariables,
  signal?: AbortSignal,
) =>
  api1Fetch<
    Schemas.UserPublicRepresentationDTO,
    GetUserByIdError,
    undefined,
    {},
    {},
    GetUserByIdPathParams
  >({ url: "/api/users/{id}", method: "get", ...variables, signal });

export function getUserByIdQuery(variables: GetUserByIdVariables): {
  queryKey: reactQuery.QueryKey;
  queryFn: (
    options: QueryFnOptions,
  ) => Promise<Schemas.UserPublicRepresentationDTO>;
};

export function getUserByIdQuery(
  variables: GetUserByIdVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((
        options: QueryFnOptions,
      ) => Promise<Schemas.UserPublicRepresentationDTO>)
    | reactQuery.SkipToken;
};

export function getUserByIdQuery(
  variables: GetUserByIdVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/api/users/{id}",
      operationId: "getUserById",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) => fetchGetUserById(variables, signal),
  };
}

export const useSuspenseGetUserById = <
  TData = Schemas.UserPublicRepresentationDTO,
>(
  variables: GetUserByIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserPublicRepresentationDTO,
      GetUserByIdError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useSuspenseQuery<
    Schemas.UserPublicRepresentationDTO,
    GetUserByIdError,
    TData
  >({
    ...getUserByIdQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetUserById = <TData = Schemas.UserPublicRepresentationDTO,>(
  variables: GetUserByIdVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.UserPublicRepresentationDTO,
      GetUserByIdError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useQuery<
    Schemas.UserPublicRepresentationDTO,
    GetUserByIdError,
    TData
  >({
    ...getUserByIdQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type GetKeycloakIdByEmailPathParams = {
  email: string;
};

export type GetKeycloakIdByEmailError = Fetcher.ErrorWrapper<undefined>;

export type GetKeycloakIdByEmailVariables = {
  pathParams: GetKeycloakIdByEmailPathParams;
} & Api1Context["fetcherOptions"];

export const fetchGetKeycloakIdByEmail = (
  variables: GetKeycloakIdByEmailVariables,
  signal?: AbortSignal,
) =>
  api1Fetch<
    string,
    GetKeycloakIdByEmailError,
    undefined,
    {},
    {},
    GetKeycloakIdByEmailPathParams
  >({ url: "/api/users/email/{email}", method: "get", ...variables, signal });

export function getKeycloakIdByEmailQuery(
  variables: GetKeycloakIdByEmailVariables,
): {
  queryKey: reactQuery.QueryKey;
  queryFn: (options: QueryFnOptions) => Promise<string>;
};

export function getKeycloakIdByEmailQuery(
  variables: GetKeycloakIdByEmailVariables | reactQuery.SkipToken,
): {
  queryKey: reactQuery.QueryKey;
  queryFn:
    | ((options: QueryFnOptions) => Promise<string>)
    | reactQuery.SkipToken;
};

export function getKeycloakIdByEmailQuery(
  variables: GetKeycloakIdByEmailVariables | reactQuery.SkipToken,
) {
  return {
    queryKey: queryKeyFn({
      path: "/api/users/email/{email}",
      operationId: "getKeycloakIdByEmail",
      variables,
    }),
    queryFn:
      variables === reactQuery.skipToken
        ? reactQuery.skipToken
        : ({ signal }: QueryFnOptions) =>
            fetchGetKeycloakIdByEmail(variables, signal),
  };
}

export const useSuspenseGetKeycloakIdByEmail = <TData = string,>(
  variables: GetKeycloakIdByEmailVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<string, GetKeycloakIdByEmailError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useSuspenseQuery<string, GetKeycloakIdByEmailError, TData>({
    ...getKeycloakIdByEmailQuery(deepMerge(fetcherOptions, variables)),
    ...options,
    ...queryOptions,
  });
};

export const useGetKeycloakIdByEmail = <TData = string,>(
  variables: GetKeycloakIdByEmailVariables | reactQuery.SkipToken,
  options?: Omit<
    reactQuery.UseQueryOptions<string, GetKeycloakIdByEmailError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { queryOptions, fetcherOptions } = useApi1Context(options);
  return reactQuery.useQuery<string, GetKeycloakIdByEmailError, TData>({
    ...getKeycloakIdByEmailQuery(
      variables === reactQuery.skipToken
        ? variables
        : deepMerge(fetcherOptions, variables),
    ),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: "/api/users";
      operationId: "getAllUsers";
      variables: GetAllUsersVariables | reactQuery.SkipToken;
    }
  | {
      path: "/api/users/{id}";
      operationId: "getUserById";
      variables: GetUserByIdVariables | reactQuery.SkipToken;
    }
  | {
      path: "/api/users/email/{email}";
      operationId: "getKeycloakIdByEmail";
      variables: GetKeycloakIdByEmailVariables | reactQuery.SkipToken;
    };
